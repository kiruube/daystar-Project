router.get('/search', async (req, res) => {
   try {
     const query = req.query.query;
     
     if (!query) {
       return res.render('search', { query: '', results: [], error: 'Please provide a search query' });
     }
 
     // Define an array of model names you want to search through
     const modelsToSearch = [Sitters, Dolls, Register, Application, Procurement]; // Update this array with your model names
 
     // Perform asynchronous search queries across all models
     async.map(mod
You
10:20 PM
oh
Janet Abalo
10:21 PM
form#searchForm(action='/sitterslist', method='GET')
        input#searchInput(type='text', placeholder='Search...', name='q', value= q)
        button#searchButton(type='submit') Search



 
router.get('/search', async (req, res) => {
   try {
     const query = req.query.query;
     
     if (!query) {
       return res.render('search', { query: '', results: [], error: 'Please provide a search query' });
     }
 
     // Define an array of model names you want to search through
     const modelsToSearch = [Sitters, Dolls, Register, Application, Procurement]; // Update this array with your model names
 
     // Perform asynchronous search queries across all models
     async.map(modelsToSearch, (model, callback) => {
       model.find({ $text: { $search: query } }, (err, results) => {
         if (err) {
           return callback(err);
         }
         callback(null, results);
       });
     }, (err, searchResults) => {
       if (err) {
         console.error('Error searching for items:', err);
         return res.status(500).send('Internal server error');
       }
 // Flatten the array of search results
       const flattenedResults = searchResults.flat();
 
       // Render the search results using a Pug template
       res.render('search-results', { query, results: flattenedResults });
     });
   } catch (error) {
     console.error('Error searching for items:', error);
     res.status(500).send('Internal server error');
   }
 });










 // Fetching sitters from the database
router.get("/sitterslist", async (req, res) => {
  try {
    const filters = {};
    const q = req.query.q;
    if (q) {
      // Filter by sitter name (first or last name) - like
      filters.$or = [
        { firstName: { $regex: q, $options: 'i' } },
        { lastName: { $regex: q, $options: 'i' } }
      ];
    }
    const sitters = await Sitters.find(filters);
    res.render("sittersmanagement", { sitters: sitters, q });
  } catch (error) {
    res.status(400).send("Unable to fetch sitters from the database.");
    console.error("Error fetching sitters:", error);
  }
});